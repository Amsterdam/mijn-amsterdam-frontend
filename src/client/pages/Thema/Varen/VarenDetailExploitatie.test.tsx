import { render, within } from '@testing-library/react';
import Mockdate from 'mockdate';
import { generatePath } from 'react-router';
import { afterAll, beforeAll, describe, expect, it } from 'vitest';

import { routeConfig } from './Varen-thema-config';
import { VarenDetailPageContentExploitatieVergunning } from './VarenDetailVergunningExploitatie';
import { VarenDetailPageContentExploitatieZaak } from './VarenDetailZaakExploitatie';
import {
  VarenZakenFrontend,
  VarenRegistratieRederType,
  VarenVergunningFrontend,
} from '../../../../server/services/varen/config-and-types';
import { jsonCopy } from '../../../../universal/helpers/utils';
import { AppState } from '../../../../universal/types/App.types';
import MockApp from '../../MockApp';

const VAREN_VERGUNNING_DEFAULT: VarenVergunningFrontend = {
  id: 'Z-25-0000001-10001',
  identifier: 'Z/25/0000001-10001',
  vergunningKenmerk: 'Z/25/0000001',
  vesselName: 'Titanic',
  vesselLength: '2,31',
  vesselWidth: '2,32',
  segment: 'Onbemand',
  eniNumber: '7654321',
} as unknown as VarenVergunningFrontend;

type ExploitatieAanvraag = VarenZakenFrontend;
const VAREN_DEFAULT = {
  id: 'Z-24-0000001',
  identifier: 'Z/24/0000001',
  key: 'ABCDEF0123456789ABCDEF0123456789',
  caseType: 'Varen vergunning exploitatie',
  title: 'Varen vergunning exploitatie',
  status: 'Afgehandeld',
  decision: 'Verleend',
  processed: false,
  linkDataRequest: null,
  vesselName: 'Titanic',
  vesselLength: '2,31',
  vesselWidth: '2,32',
  vesselHeight: '2,33',
  vesselDepth: '2,34',
  numberOfSeats: 150,
  segment: 'Onbemand',
  formAppearance: 2,
  eniNumber: '7654321',
  steps: [],
  link: { title: 'test', to: 'path' },
} as unknown as ExploitatieAanvraag;

const createSteps = (
  statusActive: ExploitatieAanvraag['displayStatus'],
  includeMeerInformatieStep: boolean = false
) => {
  const steps = [
    {
      status: 'Ontvangen' as const,
      datePublished: '2023-11-07T00:00:00',
      description: '',
      isActive: statusActive === 'Ontvangen',
      isChecked: true,
      id: 'step-0',
    },
    {
      status: 'In behandeling' as const,
      datePublished: '2023-11-08T00:00:00',
      description: '',
      isActive: statusActive === 'In behandeling',
      isChecked:
        statusActive !== 'Ontvangen' && statusActive !== 'In behandeling',
      id: 'step-1',
    },
    {
      status: 'Meer informatie nodig' as const,
      datePublished: '2023-11-08T00:00:00',
      description: '',
      isActive: statusActive === 'Meer informatie nodig',
      isChecked:
        statusActive !== 'Ontvangen' &&
        statusActive !== 'In behandeling' &&
        statusActive !== 'Meer informatie nodig',
      id: 'step-2',
    },
    {
      status: 'Afgehandeld' as const,
      datePublished: '2023-11-09T00:00:00',
      isActive: false,
      isChecked: statusActive === 'Afgehandeld',
      id: 'step-3',
    },
  ];

  if (includeMeerInformatieStep) {
    return steps;
  }
  return steps.filter((step) => step.status !== 'Meer informatie nodig');
};

const exploitatieReceived: ExploitatieAanvraag = {
  ...VAREN_DEFAULT,
  processed: false,
  displayStatus: 'Ontvangen',
  steps: createSteps('Ontvangen'),
  dateDecision: null,
  dateDecisionFormatted: null,
};

const exploitatieInProgress: ExploitatieAanvraag = {
  ...VAREN_DEFAULT,
  displayStatus: 'In behandeling',
  processed: false,
  steps: createSteps('In behandeling'),
  dateDecision: null,
  dateDecisionFormatted: null,
};

const exploitatieWijziging: ExploitatieAanvraag = {
  ...VAREN_DEFAULT,
  caseType: 'Varen vergunning exploitatie Wijziging vaartuignaam',
  vesselNameNew: 'newVesselName',
  displayStatus: 'In behandeling',
  processed: false,
  steps: createSteps('In behandeling'),
  dateDecision: null,
  dateDecisionFormatted: null,
  vergunning: VAREN_VERGUNNING_DEFAULT,
};

const rederRegistratie = {
  id: '2801937838',
  title: 'Varen registratie reder',
  caseType: 'Varen registratie reder',
  company: 'Balonnenfabriek',
  bsnkvk: 'KVK',
  address: 'Amstel 1, 1011 PN Amsterdam',
  postalCode: null,
  city: null,
  phone: '0612345678',
  email: 'myemailadres@example.com',
  dateRequest: '2023-11-06T00:00:00',
} as unknown as VarenRegistratieRederType;

const varenZaken = [
  exploitatieReceived,
  exploitatieInProgress,
  exploitatieWijziging,
];

const varenVergunningen = [VAREN_VERGUNNING_DEFAULT];

const getTestState = (
  zaken: VarenZakenFrontend[] = varenZaken,
  reder: VarenRegistratieRederType | null = rederRegistratie,
  vergunningen: VarenVergunningFrontend[] = varenVergunningen
): AppState =>
  jsonCopy({
    VAREN: {
      content: {
        reder,
        zaken,
        vergunningen,
      },
      status: 'OK',
    },
  });

const routePath = routeConfig.detailPageZaak.path;

describe('<VarenDetail />', () => {
  function ZaakComponent({ state }: { state: AppState }) {
    return (
      <MockApp
        routePath={routeConfig.detailPageZaak.path}
        routeEntry={generatePath(routeConfig.detailPageZaak.path, {
          caseType: 'Varen vergunning exploitatie',
          id: 'Z-24-0000001',
        })}
        component={VarenDetailPageContentExploitatieZaak}
        state={state}
      />
    );
  }
  function VergunningComponent({ state }: { state: AppState }) {
    return (
      <MockApp
        routePath={routePath}
        routeEntry={generatePath(routeConfig.detailPageZaak.path, {
          caseType: 'Varen vergunning exploitatie',
          id: 'Z-25-0000001-10001',
        })}
        component={VarenDetailPageContentExploitatieVergunning}
        state={state}
      />
    );
  }

  beforeAll(() => {
    Mockdate.set('2025-03-04');
  });

  afterAll(() => {
    Mockdate.reset();
  });

  it('Shows the expected title on the page for Varen vergunning exploitatie', () => {
    const screen = render(
      <ZaakComponent state={getTestState([exploitatieReceived])} />
    );
    expect(screen.getByRole('heading', { level: 1 })).toHaveTextContent(
      'Varen vergunning exploitatie'
    );
  });

  it('Shows the expected texts for Varen vergunning exploitatie', () => {
    const screen = render(
      <ZaakComponent
        state={getTestState([exploitatieWijziging], null, [
          VAREN_VERGUNNING_DEFAULT,
        ])}
      />
    );

    const vesselName = screen.getByText('Naam vaartuig');
    expect(vesselName.nextElementSibling).toHaveTextContent('Titanic');

    const segment = screen.getByText('Segment');
    expect(segment.nextElementSibling).toHaveTextContent('Onbemand');

    const vesselLength = screen.getByText('Lengte vaartuig');
    expect(vesselLength.nextElementSibling).toHaveTextContent('2,31 meter');

    const vesselWidth = screen.getByText('Breedte vaartuig');
    expect(vesselWidth.nextElementSibling).toHaveTextContent('2,32 meter');

    const zaakkenmerk = screen.getByText('Zaakkenmerk');
    expect(zaakkenmerk.nextElementSibling).toHaveTextContent('Z/24/0000001');

    const vergunningKenmerk = screen.getByText('Vergunningkenmerk');
    expect(vergunningKenmerk.nextElementSibling).toHaveTextContent(
      'Z/25/0000001'
    );

    const eniNumber = screen.getByText('ENI-nummer');
    expect(eniNumber.nextElementSibling).toHaveTextContent('7654321');
  });

  it('Shows the expected texts for Varen vergunning exploitatie when zaak data is empty', () => {
    const screen = render(
      <ZaakComponent
        state={getTestState(
          [
            {
              ...exploitatieWijziging,
              eniNumber: null,
              vesselWidth: null,
              vesselLength: null,
            },
          ],
          null,
          [VAREN_VERGUNNING_DEFAULT]
        )}
      />
    );

    const vesselName = screen.getByText('Naam vaartuig');
    expect(vesselName.nextElementSibling).toHaveTextContent('Titanic');

    const segment = screen.getByText('Segment');
    expect(segment.nextElementSibling).toHaveTextContent('Onbemand');

    const vesselLength = screen.getByText('Lengte vaartuig');
    expect(vesselLength.nextElementSibling).toHaveTextContent('2,31 meter');

    const vesselWidth = screen.getByText('Breedte vaartuig');
    expect(vesselWidth.nextElementSibling).toHaveTextContent('2,32 meter');

    const zaakkenmerk = screen.getByText('Zaakkenmerk');
    expect(zaakkenmerk.nextElementSibling).toHaveTextContent('Z/24/0000001');

    const vergunningKenmerk = screen.getByText('Vergunningkenmerk');
    expect(vergunningKenmerk.nextElementSibling).toHaveTextContent(
      'Z/25/0000001'
    );

    const eniNumber = screen.getByText('ENI-nummer');
    expect(eniNumber.nextElementSibling).toHaveTextContent('7654321');
  });

  it('Shows the expected texts for Varen vergunning exploitatie when vergunning data is empty', () => {
    const screen = render(
      <ZaakComponent
        state={getTestState([
          {
            ...exploitatieWijziging,
            vergunning: {
              ...exploitatieWijziging.vergunning!,
              eniNumber: null,
              vesselWidth: null,
              vesselLength: null,
              vergunningKenmerk: null,
            },
          },
        ])}
      />
    );

    const vesselName = screen.getByText('Naam vaartuig');
    expect(vesselName.nextElementSibling).toHaveTextContent('Titanic');

    const segment = screen.getByText('Segment');
    expect(segment.nextElementSibling).toHaveTextContent('Onbemand');

    const eniNumber = screen.getByText('ENI-nummer');
    expect(eniNumber.nextElementSibling).toHaveTextContent('-');

    const vesselWidth = screen.getByText('Breedte vaartuig');
    expect(vesselWidth.nextElementSibling).toHaveTextContent('-');

    const vesselLength = screen.getByText('Lengte vaartuig');
    expect(vesselLength.nextElementSibling).toHaveTextContent('-');

    const vergunningKenmerk = screen.getByText('Vergunningkenmerk');
    expect(vergunningKenmerk.nextElementSibling).toHaveTextContent('-');
  });

  it('Shows the expected texts for Varen vergunning exploitatie when processed', () => {
    const screen = render(<VergunningComponent state={getTestState()} />);

    const vergunningKenmerk = screen.getByText('Vergunningkenmerk');
    expect(vergunningKenmerk.nextElementSibling).toHaveTextContent(
      'Z/25/0000001'
    );

    const result = screen.queryByText('Afgehandeld');
    expect(result).not.toBeInTheDocument();
  });

  it('Shows the status items for Varen vergunning exploitatie', () => {
    const screen = render(
      <ZaakComponent state={getTestState([exploitatieReceived])} />
    );
    const statusses = within(
      screen.getByText('Status van uw aanvraag').parentElement!
    );
    expect(statusses.getByText('Ontvangen')).toBeInTheDocument();
    expect(statusses.getByText('In behandeling')).toBeInTheDocument();
    expect(
      statusses.queryByText('Meer informatie nodig')
    ).not.toBeInTheDocument();
    expect(statusses.getByText('Afgehandeld')).toBeInTheDocument();
  });

  it('Shows the status items for Varen vergunning exploitatie including the step meer informatie nodig', () => {
    const screen = render(
      <ZaakComponent
        state={getTestState([
          {
            ...exploitatieReceived,
            steps: createSteps('Meer informatie nodig', true),
          },
        ])}
      />
    );
    const statusses = within(
      screen.getByText('Status van uw aanvraag').parentElement!
    );
    expect(statusses.getByText('Ontvangen')).toBeInTheDocument();
    expect(statusses.getByText('In behandeling')).toBeInTheDocument();
    expect(statusses.getByText('Meer informatie nodig')).toBeInTheDocument();
    expect(statusses.getByText('Afgehandeld')).toBeInTheDocument();
  });

  const BTN_TEXT_WIJZIGEN_EXPLOITATIE = 'Wijzigen';
  describe('Varen vergunning exploitatie action buttons', () => {
    it('Does not show action buttons on Varen zaken', () => {
      const screen = render(
        <ZaakComponent state={getTestState([exploitatieReceived])} />
      );
      expect(
        screen.queryByRole('link', { name: BTN_TEXT_WIJZIGEN_EXPLOITATIE })
      ).toBeNull();
    });

    it('Does not show action buttons, wijzings alert or reder alert on Varen zaken in progress', () => {
      const screen = render(
        <ZaakComponent state={getTestState([exploitatieInProgress])} />
      );
      expect(screen.queryByText(BTN_TEXT_WIJZIGEN_EXPLOITATIE)).toBeNull();

      const alertReder = screen.queryByRole('heading', {
        name: 'Registreer uw onderneming',
      });
      expect(alertReder).not.toBeInTheDocument();

      const alertWijziging = screen.queryByRole('heading', {
        name: 'Wijziging in behandeling',
      });
      expect(alertWijziging).not.toBeInTheDocument();
    });

    it('Shows the action buttons on Varen vergunningen exploitatie', () => {
      const screen = render(<VergunningComponent state={getTestState()} />);
      const btnWijzigen = screen.getByRole('link', {
        name: BTN_TEXT_WIJZIGEN_EXPLOITATIE,
      });
      expect(btnWijzigen.getAttribute('href')).toContain('formulieren');
      expect(btnWijzigen.getAttribute('href')).toContain(
        'guid=Z-25-0000001-10001'
      );
      expect(btnWijzigen).toHaveAttribute('aria-disabled', 'false');
    });

    it('Remove action buttons on Varen vergunning exploitatie when reder is not known and show alert', () => {
      const screen = render(
        <VergunningComponent
          state={getTestState([], null, [VAREN_VERGUNNING_DEFAULT])}
        />
      );
      const btnWijzigen = screen.queryByRole('link', {
        name: BTN_TEXT_WIJZIGEN_EXPLOITATIE,
      });
      expect(btnWijzigen).not.toBeInTheDocument();

      const alertReder = screen.queryByRole('heading', {
        name: 'Registreer uw onderneming',
      });
      expect(alertReder).toBeInTheDocument();
    });

    it('Remove action buttons on Varen vergunning exploitatie when vergunning has exploitatie change request in progress and show alert', () => {
      const vergunning = {
        ...VAREN_VERGUNNING_DEFAULT,
        linkedActiveZaakLink: {
          title: 'zaak',
          to: '/zaak',
        },
      };
      const screen = render(
        <VergunningComponent state={getTestState([], null, [vergunning])} />
      );
      const btnWijzigen = screen.queryByRole('link', {
        name: BTN_TEXT_WIJZIGEN_EXPLOITATIE,
      });
      expect(btnWijzigen).not.toBeInTheDocument();

      const alertWijziging = screen.queryByRole('heading', {
        name: 'Wijziging in behandeling',
      });
      expect(
        within(alertWijziging!.parentElement!.parentElement!)
          .getByRole('link')
          .getAttribute('href')
      ).toContain('zaak');
    });
  });
});
