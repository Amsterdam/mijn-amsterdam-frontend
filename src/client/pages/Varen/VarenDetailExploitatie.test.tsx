import { render } from '@testing-library/react';
import Mockdate from 'mockdate';
import { generatePath } from 'react-router-dom';
import { MutableSnapshot } from 'recoil';
import { afterAll, beforeAll, describe, expect, it } from 'vitest';

import { VarenDetail } from './VarenDetail';
import {
  VarenFrontend,
  VarenRegistratieRederType,
  VarenVergunningExploitatieType,
} from '../../../server/services/varen/config-and-types';
import { AppRoutes } from '../../../universal/config/routes';
import { jsonCopy } from '../../../universal/helpers/utils';
import { AppState } from '../../../universal/types/App.types';
import { appStateAtom } from '../../hooks/useAppState';
import MockApp from '../MockApp';

type ExploitatieAanvraag = VarenFrontend<VarenVergunningExploitatieType>;
const VAREN_DEFAULT: ExploitatieAanvraag = {
  id: 'Z-24-0000001',
  identifier: 'Z/24/3421790',
  key: 'ABCDEF0123456789ABCDEF0123456789',
  caseType: 'Varen vergunning exploitatie',
  title: 'Varen vergunning exploitatie',
  statusDates: [],
  termijnDates: [],
  status: 'Besluit',
  decision: 'Verleend',
  processed: false,
  dateStart: null,
  dateEnd: null,
  linkDataRequest: null,
  vesselName: 'Titanic',
  vesselLength: '2,31',
  vesselWidth: '2,32',
  vesselHeight: '2,33',
  vesselDepth: '2,34',
  numberOfSeats: 150,
  segment: 'Onbemand',
  formAppearance: 2,
  eniNumber: '7654321',
  permitReference: '123456789',
  dateRequest: '2023-11-07T00:00:00',
  dateRequestFormatted: '07 november 2023',
  dateInBehandeling: '2023-11-07T00:00:00',
  dateInBehandelingFormatted: '07 november 2023',
  dateDecision: '2023-11-08T00:00:00',
  dateDecisionFormatted: '08 november 2023',
  steps: [],
  fetchDocumentsUrl:
    'http://localhost:5000/api/v1/services/decos/documents?id=pejSv3WxQXKnqLC-_zGaefC9CD1ZUK2NZ31kLVoSds3HcjiBX4v-o7cXh5wdOXaWUqrH2DQIFFC_l8EfSe3NPqhNflv9JPNekMelZQs_eAA',
  link: {
    to: '/passagiers-en-beroepsvaart/vergunning/varen-vergunning-exploitatie/Z-24-3421790',
    title: 'Bekijk hoe het met uw aanvraag staat',
  },
};

const createSteps = (
  statusActive: ExploitatieAanvraag['status'],
  includeMeerInformatieStep: boolean = false
) => {
  const steps = [
    {
      status: 'Ontvangen',
      datePublished: '2023-11-07T00:00:00',
      description: '',
      isActive: statusActive === 'Ontvangen',
      isChecked: true,
      id: 'step-0',
    },
    {
      status: 'In behandeling',
      datePublished: '2023-11-08T00:00:00',
      description: '',
      isActive: statusActive === 'In behandeling',
      isChecked:
        statusActive !== 'Ontvangen' && statusActive !== 'In behandeling',
      id: 'step-1',
    },
    {
      status: 'Meer informatie nodig',
      datePublished: '2023-11-08T00:00:00',
      description: '',
      isActive: statusActive === 'Meer informatie nodig',
      isChecked:
        statusActive !== 'Ontvangen' &&
        statusActive !== 'In behandeling' &&
        statusActive !== 'Meer informatie nodig',
      id: 'step-1',
    },
    {
      status: 'Besluit',
      datePublished: '2023-11-09T00:00:00',
      isActive: false,
      isChecked: statusActive === 'Besluit',
      id: 'step-2',
    },
  ];

  if (includeMeerInformatieStep) {
    return steps;
  }
  return steps.filter((step) => step.status !== 'Meer informatie nodig');
};

const exploitatieReceived: ExploitatieAanvraag = {
  ...VAREN_DEFAULT,
  processed: false,
  status: 'Besluit',
  steps: createSteps('Ontvangen'),
  dateInBehandeling: null,
  dateInBehandelingFormatted: null,
  dateDecision: null,
  dateDecisionFormatted: null,
};

const exploitatieInProgress: ExploitatieAanvraag = {
  ...VAREN_DEFAULT,
  status: 'Besluit',
  processed: false,
  steps: createSteps('In behandeling'),
  dateDecision: null,
  dateDecisionFormatted: null,
};

const exploitatieDecision: ExploitatieAanvraag = {
  ...VAREN_DEFAULT,
  status: 'Besluit',
  decision: 'Verleend',
  processed: true,
  steps: createSteps('Besluit'),
};

const rederRegistratie: VarenFrontend<VarenRegistratieRederType> = {
  id: '2801937838',
  title: 'Varen registratie reder',
  caseType: 'Varen registratie reder',
  company: 'Balonnenfabriek',
  bsnkvk: 'KVK',
  address: 'Amstel 1, 1011 PN Amsterdam',
  postalCode: null,
  city: null,
  phone: '0612345678',
  email: 'myemailadres@example.com',
  dateRequestFormatted: '06 november 2023',
} as unknown as VarenFrontend<VarenRegistratieRederType>;

const varenContent: AppState['VAREN']['content'] = [
  exploitatieReceived,
  exploitatieInProgress,
  exploitatieDecision,
  rederRegistratie,
];

const getTestState = (content: VarenFrontend[] = varenContent): AppState =>
  jsonCopy({
    VAREN: {
      content: content,
      status: 'OK',
    },
  });

function initializeState(snapshot: MutableSnapshot, state: AppState) {
  snapshot.set(appStateAtom, state);
}

const routePath = AppRoutes['VAREN/DETAIL'];
const routeEntry = generatePath(AppRoutes['VAREN/DETAIL'], {
  caseType: 'Varen vergunning exploitatie',
  id: 'Z-24-0000001',
});

describe('<VarenDetail />', () => {
  function Component({ state }: { state: AppState }) {
    return (
      <MockApp
        routePath={routePath}
        routeEntry={routeEntry}
        component={VarenDetail}
        initializeState={(snap) => initializeState(snap, state)}
      />
    );
  }

  beforeAll(() => {
    Mockdate.set('2025-03-04');
  });

  afterAll(() => {
    Mockdate.reset();
  });

  it('Shows the expected title on the page for Varen vergunning exploitatie', () => {
    const screen = render(
      <Component state={getTestState([exploitatieReceived])} />
    );
    expect(screen.getByRole('heading', { level: 2 })).toHaveTextContent(
      'Varen vergunning exploitatie'
    );
  });

  it('Shows the expected texts for Varen vergunning exploitatie', () => {
    const screen = render(
      <Component state={getTestState([exploitatieReceived])} />
    );
    expect(screen.getByText('Resultaat')).toBeInTheDocument();
    expect(screen.getByText('-')).toBeInTheDocument();

    expect(screen.getByText('Naam vaartuig')).toBeInTheDocument();
    expect(screen.getByText('Titanic')).toBeInTheDocument();

    expect(screen.getByText('Segment')).toBeInTheDocument();
    expect(screen.getByText('Onbemand')).toBeInTheDocument();

    expect(screen.getByText('Lengte vaartuig')).toBeInTheDocument();
    expect(screen.getByText('2,31 meter')).toBeInTheDocument();

    expect(screen.getByText('Breedte vaartuig')).toBeInTheDocument();
    expect(screen.getByText('2,32 meter')).toBeInTheDocument();

    expect(screen.getByText('Vergunningkenmerk')).toBeInTheDocument();
    expect(screen.getByText('123456789')).toBeInTheDocument();

    expect(screen.getByText('ENI-nummer')).toBeInTheDocument();
    expect(screen.getByText('7654321')).toBeInTheDocument();
  });

  it('Shows the expected texts for Varen vergunning exploitatie when data is empty', () => {
    const screen = render(
      <Component
        state={getTestState([
          {
            ...exploitatieReceived,
            eniNumber: null,
            permitReference: null,
            vesselWidth: null,
            vesselHeight: null,
          },
        ])}
      />
    );
    expect(screen.getByText('Naam vaartuig')).toBeInTheDocument();
    expect(screen.getByText('Titanic')).toBeInTheDocument();

    expect(screen.getByText('Segment')).toBeInTheDocument();
    expect(screen.getByText('Onbemand')).toBeInTheDocument();

    expect(screen.getByText('Resultaat')).toBeInTheDocument();
    expect(screen.getByText('Lengte vaartuig')).toBeInTheDocument();
    expect(screen.getByText('Breedte vaartuig')).toBeInTheDocument();
    expect(screen.getByText('Vergunningkenmerk')).toBeInTheDocument();
    expect(screen.getByText('ENI-nummer')).toBeInTheDocument();
    expect(screen.queryAllByText('-').length).toBe(5);
  });

  it('Shows the expected texts for Varen vergunning exploitatie when processed', () => {
    const screen = render(
      <Component
        state={getTestState([
          {
            ...exploitatieDecision,
          },
        ])}
      />
    );
    expect(screen.getByText('Resultaat')).toBeInTheDocument();
    expect(screen.getByText('Verleend')).toBeInTheDocument();
  });

  it('Shows the status items for Varen vergunning exploitatie', () => {
    const screen = render(
      <Component state={getTestState([exploitatieReceived])} />
    );
    expect(screen.getByText('Ontvangen')).toBeInTheDocument();
    expect(screen.getByText('In behandeling')).toBeInTheDocument();
    expect(screen.queryByText('Meer informatie nodig')).not.toBeInTheDocument();
    expect(screen.getByText('Besluit')).toBeInTheDocument();
  });

  it('Shows the status items for Varen vergunning exploitatie including the step meer informatie nodig', () => {
    const screen = render(
      <Component
        state={getTestState([
          {
            ...exploitatieReceived,
            steps: createSteps('Meer informatie nodig', true),
          },
        ])}
      />
    );
    expect(screen.getByText('Ontvangen')).toBeInTheDocument();
    expect(screen.getByText('In behandeling')).toBeInTheDocument();
    expect(screen.getByText('Meer informatie nodig')).toBeInTheDocument();
    expect(screen.getByText('Besluit')).toBeInTheDocument();
  });

  describe('Varen vergunning exploitatie action buttons', () => {
    it('Does not show action buttons on Varen vergunning exploitatie received', () => {
      const screen = render(
        <Component state={getTestState([exploitatieReceived])} />
      );
      expect(screen.queryByText('Wijzigen')).toBeNull();
      expect(screen.queryByText('Ligplaatsvergunning aanvragen')).toBeNull();
    });

    it('Does not show action buttons on Varen vergunning exploitatie in progress', () => {
      const screen = render(
        <Component state={getTestState([exploitatieInProgress])} />
      );
      expect(screen.queryByText('Wijzigen')).toBeNull();
      expect(screen.queryByText('Ligplaatsvergunning aanvragen')).toBeNull();
    });

    it('Shows the action buttons on Varen vergunning exploitatie processed', () => {
      const screen = render(
        <Component
          state={getTestState([exploitatieDecision, rederRegistratie])}
        />
      );
      expect(screen.getByText('Wijzigen').getAttribute('href')).toContain(
        'formulieren'
      );
      expect(screen.getByText('Wijzigen').getAttribute('href')).toContain(
        'guid=ABCDEF0123456789ABCDEF0123456789'
      );
      expect(screen.getByText('Wijzigen').getAttribute('aria-disabled')).toBe(
        'false'
      );

      expect(
        screen.getByText('Ligplaatsvergunning aanvragen').getAttribute('href')
      ).toContain('formulieren');
      expect(
        screen
          .getByText('Ligplaatsvergunning aanvragen')
          .getAttribute('aria-disabled')
      ).toBe('false');
    });

    it('Disables action buttons on Varen vergunning exploitatie when reder is not known', () => {
      const screen = render(
        <Component state={getTestState([exploitatieDecision])} />
      );
      expect(screen.getByText('Wijzigen').getAttribute('href')).toBeNull();
      expect(screen.getByText('Wijzigen').getAttribute('aria-disabled')).toBe(
        'true'
      );

      expect(
        screen.getByText('Ligplaatsvergunning aanvragen').getAttribute('href')
      ).toBeNull();
      expect(
        screen
          .getByText('Ligplaatsvergunning aanvragen')
          .getAttribute('aria-disabled')
      ).toBe('true');
    });
  });
});
