import {
  ActionGroup,
  Grid,
  GridColumnNumber,
  Icon,
} from '@amsterdam/design-system-react';
import { ExternalLinkIcon } from '@amsterdam/design-system-react-icons';

import { CONTENT_EMPTY } from './helper';
import styles from './Varen.module.scss';
import type {
  VarenFrontend,
  VarenVergunningExploitatieType,
} from '../../../server/services/varen/config-and-types';
import { ButtonLinkProps } from '../../../universal/types';
import { Datalist, RowSet } from '../../components/Datalist/Datalist';
import { MaButtonLink } from '../../components/MaLink/MaLink';

type VarenDetailPageContentProps = {
  vergunning: VarenFrontend<VarenVergunningExploitatieType>;
  buttonItems: ButtonLinkProps[];
};

const DEFAULT_GRID_SPAN: GridColumnNumber = 4;
export function VarenDetailPageContentExploitatie({
  vergunning,
  buttonItems,
}: VarenDetailPageContentProps) {
  const rows: RowSet[] = [
    {
      rows: [
        {
          label: 'Naam vaartuig',
          content: vergunning.vesselName,
          span: DEFAULT_GRID_SPAN,
        },
        {
          label: 'Segment',
          content: vergunning.segment,
          span: DEFAULT_GRID_SPAN,
        },
      ],
    },
    {
      rows: [
        {
          label: 'Lengte vaartuig',
          content: vergunning.vesselLength
            ? `${vergunning.vesselLength} meter`
            : CONTENT_EMPTY,
          span: DEFAULT_GRID_SPAN,
        },
        {
          label: 'Breedte vaartuig',
          content: vergunning.vesselWidth
            ? `${vergunning.vesselWidth} meter`
            : CONTENT_EMPTY,
          span: DEFAULT_GRID_SPAN,
        },
      ],
    },
    {
      rows: [
        {
          label: 'Vergunningkenmerk',
          content: vergunning.vergunningKenmerk || CONTENT_EMPTY,
          span: DEFAULT_GRID_SPAN,
        },
        {
          label: 'ENI-nummer',
          content: vergunning.eniNumber || CONTENT_EMPTY,
          span: DEFAULT_GRID_SPAN,
        },
      ],
    },
  ];

  return (
    <>
      <Grid.Cell span="all">
        <Datalist rows={rows} className={styles.VarenGridWithoutRowGap} />
      </Grid.Cell>
      {buttonItems?.length > 0 && (
        <Grid.Cell span="all">
          <ActionGroup>
            {buttonItems.map(({ to, title, isDisabled }) => (
              <MaButtonLink
                key={to}
                href={to}
                isDisabled={isDisabled}
                variant="secondary"
                className={styles.VarenButton}
              >
                {title}
                <Icon svg={ExternalLinkIcon} size="level-5" />
              </MaButtonLink>
            ))}
          </ActionGroup>
        </Grid.Cell>
      )}
    </>
  );
}
