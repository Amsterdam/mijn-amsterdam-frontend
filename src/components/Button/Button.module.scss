@import 'styles/_global.scss';

$buttons: (
  // Primary button
  primary: (
    background-color: $color-primary-red,
    border: 1px solid $color-primary-red,
    text-color: $color-white,

    background-color-hover: $color-support-red,
    border-color-hover: $color-support-red,
    outline-hover: default,
    text-color-hover: $color-white,
  ),

  secondary: (
    // Secondary
    background-color: $color-primary-darkblue,
    border: 1px solid $color-primary-darkblue,
    text-color: $color-white,

    background-color-hover: $color-support-darkblue,
    border-color-hover: $color-support-darkblue,
    outline-hover: default,
    text-color-hover: $color-white
  ),

  secondary-inverted: (
    // Secondary inverted
    background-color: $color-white,
    border: 1px solid $color-primary-darkblue,
    text-color: $color-primary-darkblue,

    background-color-hover: $color-white,
    border-color-hover: $color-support-darkblue,
    outline-hover: 1px solid $color-support-darkblue,
    text-color-hover: $color-support-darkblue
  ),

  plain: (
    // Plain
    background-color: transparent,
    border: 1px solid transparent,
    text-color: $color-black,

    background-color-hover: transparent,
    border-color-hover: transparent,
    outline-hover: default,
    text-color-hover: $color-primary-red
  )
);

@function button-prop($variant, $prop) {
  @return map-get(map-get($buttons, $variant), $prop);
}

@mixin buttonStyle($variant: primary) {
  &__#{$variant} {

    &[disabled],
    &.disabled {
      &, &:hover {
        background-color: $color-neutral-grey2;
        border: 1px solid $color-neutral-grey2;
        color: $color-neutral-grey4;
        outline: default;
        pointer-events: none;
      }
    }

    background-color: button-prop($variant, background-color);
    border: button-prop($variant, border);
    color: button-prop($variant, text-color);

    @include hoverCapable {
      &:hover {
        background-color: button-prop($variant, background-color-hover);
        border-color: button-prop($variant, border-color-hover);
        color: button-prop($variant, text-color-hover);
        outline: button-prop($variant, outline-hover);

        > svg,
        .Icon {
          fill: button-prop($variant, text-color-hover);
        }
        .Chevron:before {
          border-color: button-prop($variant, text-color-hover);
        }
      }
    }

    @content;
  }
}

.Button {
  height: 4.4rem;
  cursor: pointer;
  font-size: 1em;
  line-height: 1.2em;
  display: inline-flex;
  align-items: center;
  text-decoration: none;
  font-weight: 500;
  padding: 0 1rem;
  // white-space: nowrap;

  @include buttonStyle(primary);
  @include buttonStyle(secondary);
  @include buttonStyle(secondary-inverted);
  @include buttonStyle(plain) {
    &:hover {
      text-decoration: underline;
    }
  };

  &:visited:not(:hover) {
    color: inherit;
  }

  &__inline {
    height: auto;
    padding: 0;
  }
}

.Icon {
  height: .9em;
  width: auto;
}

.Icon__left {
  margin-right: .2rem;
}

.Icon__right {
  margin-left: .2rem;
}
